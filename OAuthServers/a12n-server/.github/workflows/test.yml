# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm ci
    - run: npm run build --if-present
  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm ci
    - run: make lint
  test:
    name: Test
    strategy:
      matrix:
        node-version: [16.x, 18.x]
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm ci
    - run: make test
  mysql:
    name: Test MySQL migrations
    needs: build
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql
        env:
          MYSQL_USER: a12nserver
          MYSQL_PASSWORD: password
          MYSQL_DATABASE: a12nserver
          MYSQL_ROOT_PASSWORD: password
        ports:
          - 3306:3306
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm ci
    - name: Run migrations
      env:
        MYSQL_USER: a12nserver
        MYSQL_PASSWORD: password
        MYSQL_DATABASE: a12nserver
        MYSQL_HOST: 127.0.0.1
      run: make migrate
  postgres:
    name: Test Postgres migrations
    needs: build
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: a12nserver
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm ci
    - run: PGPASSWORD=password psql -h 127.0.0.1 -d a12nserver -U a12nserver -c 'CREATE SCHEMA a12nserver;'
    - name: Run migrations
      env:
        PG_USER: a12nserver
        PG_PASSWORD: password
        PG_DATABASE: a12nserver
        PG_HOST: 127.0.0.1
      run: make migrate
